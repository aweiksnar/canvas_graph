// Generated by CoffeeScript 1.7.1
(function() {
  var CanvasGraph, Mark, Marks, canvas, canvasState;

  CanvasGraph = (function() {
    function CanvasGraph(canvas, data) {
      var point, zoomBtn;
      this.canvas = canvas;
      this.data = data;
      this.ctx = this.canvas.getContext('2d');
      window.ctx = this.ctx;
      window.canvas = this.canvas;
      window.canvasGraph = this;
      this.smallestX = Math.min.apply(Math, (function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(point.x);
        }
        return _results;
      }).call(this));
      this.smallestY = Math.min.apply(Math, (function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(point.y);
        }
        return _results;
      }).call(this));
      this.largestX = Math.max.apply(Math, (function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(point.x);
        }
        return _results;
      }).call(this));
      this.largestY = Math.max.apply(Math, (function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _results.push(point.y);
        }
        return _results;
      }).call(this));
      this.marks = new Marks;
      window.marks = this.marks;
      canvas.addEventListener('mousedown', (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.mark = new Mark(e, _this);
          _this.marks.create(_this.mark);
          _this.mark.dragging = true;
          return _this.mark.draw(e);
        };
      })(this));
      canvas.addEventListener('mousemove', (function(_this) {
        return function(e) {
          var _ref, _ref1;
          e.preventDefault();
          if ((_ref = _this.mark) != null ? _ref.dragging : void 0) {
            return (_ref1 = _this.mark) != null ? _ref1.draw(e) : void 0;
          }
        };
      })(this));
      zoomBtn = document.getElementById('toggle-zoom');
      zoomBtn.addEventListener('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.zoomed = !_this.zoomed;
          if (_this.zoomed) {
            return canvasState.plotZoomedPoints(5, 20);
          } else {
            return canvasState.rescale();
          }
        };
      })(this));
    }

    CanvasGraph.prototype.drawAxes = function() {
      var num, _i, _j, _ref, _ref1;
      for (num = _i = 0, _ref = this.canvas.width; _i <= _ref; num = _i += 100) {
        this.ctx.moveTo(num - .5, 0);
        this.ctx.lineTo(num - .5, this.canvas.height);
      }
      for (num = _j = 0, _ref1 = this.canvas.height; _j <= _ref1; num = _j += 100) {
        this.ctx.moveTo(0, num - .5);
        this.ctx.lineTo(this.canvas.width, num - .5);
      }
      this.ctx.strokeStyle = "gray";
      return this.ctx.stroke();
    };

    CanvasGraph.prototype.plotPoints = function() {
      var point, x, y, _i, _len, _ref;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        x = ((point.x - this.smallestX) / (this.largestX - this.smallestX)) * this.canvas.width;
        y = ((point.y - this.largestY) / (this.smallestY - this.largestY)) * this.canvas.height;
        this.ctx.fillStyle = "#fff";
        this.ctx.fillRect(x, y, 2, 2);
      }
      return this.scale = (this.largestX - this.smallestX) / this.largestX;
    };

    CanvasGraph.prototype.plotZoomedPoints = function(xMin, xMax) {
      var point, x, y, _i, _len, _ref;
      this.clearCanvas();
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        x = ((point.x - xMin) / (xMax - xMin)) * this.canvas.width;
        y = ((point.y - this.largestY) / (this.smallestY - this.largestY)) * this.canvas.height;
        this.ctx.fillStyle = "#fff";
        this.ctx.fillRect(x, y, 2, 2);
      }
      return this.scale = 1 + (xMax - xMin) / this.largestX;
    };

    CanvasGraph.prototype.rescale = function() {
      this.clearCanvas();
      return this.plotPoints();
    };

    CanvasGraph.prototype.clearCanvas = function() {
      return this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    CanvasGraph.prototype.mirrorVertically = function() {
      this.ctx.translate(0, this.canvas.height);
      return this.ctx.scale(1, -1);
    };

    CanvasGraph.prototype.toCanvasXCoord = function(dataPoint) {
      return ((dataPoint - this.smallestX) / (this.largestX - this.smallestX)) * this.canvas.width;
    };

    CanvasGraph.prototype.toDataXCoord = function(canvasPoint) {
      return (canvasPoint / this.canvas.width) * (this.largestX - this.smallestX);
    };

    CanvasGraph.prototype.toDomXCoord = function(dataPoint) {
      return ((dataPoint / this.canvas.width) * (this.largestX - this.smallestX) * this.canvas.width) + this.canvas.getBoundingClientRect().left;
    };

    return CanvasGraph;

  })();

  Marks = (function() {
    function Marks() {
      this.all = [];
    }

    Marks.prototype.create = function(mark) {
      return document.getElementById('marks-container').appendChild(mark.element);
    };

    Marks.prototype.add = function(mark) {
      return this.all.push(mark);
    };

    Marks.prototype.remove = function(mark) {
      this.all.splice(this.all.indexOf(mark), 1);
      return document.getElementById('marks-container').removeChild(mark.element);
    };

    Marks.prototype.destroyAll = function() {
      document.getElementById('marks-container').innerHTML = "";
      return this.all = [];
    };

    return Marks;

  })();

  Mark = (function() {
    function Mark(e, canvasGraph) {
      this.canvasGraph = canvasGraph;
      this.element = document.createElement('div');
      this.element.className = "mark";
      this.element.style.left = e.x;
      this.element.style.top = e.target.offsetTop;
      this.startingPoint = e.x;
      this.dragging = false;
      this.element.addEventListener('mousedown', (function(_this) {
        return function(e) {
          if ((Math.abs(e.layerX - (_this.domXMax - _this.domXMin))) < 12) {
            _this.startingPoint = _this.domXMin;
            return _this.dragging = true;
          } else if (e.layerX < 12) {
            _this.startingPoint = _this.domXMax;
            return _this.dragging = true;
          } else if (e.layerY > 15) {
            _this.moving = true;
            return _this.movingStart = e.x;
          }
        };
      })(this));
      this.element.addEventListener('mousemove', (function(_this) {
        return function(e) {
          if (_this.dragging) {
            _this.draw(e);
          }
          if (_this.moving) {
            return _this.move(e);
          }
        };
      })(this));
      this.element.addEventListener('mouseup', (function(_this) {
        return function(e) {
          if (_this.dragging) {
            _this.canvasGraph.marks.add(_this);
            document.getElementById('points').innerHTML += "x1: " + _this.dataXMin + ", x2: " + _this.dataXMax + "</br>";
            console.log("Marks", _this.canvasGraph.marks);
            return _this.dragging = false;
          } else if (_this.moving) {
            _this.save(_this.domXMin, _this.domXMax);
            return _this.moving = false;
          }
        };
      })(this));
      this.element.addEventListener('click', (function(_this) {
        return function(e) {
          if (e.layerY < 15) {
            return _this.canvasGraph.marks.remove(_this);
          }
        };
      })(this));
    }

    Mark.prototype.draw = function(e) {
      var markLeftX, markRightX;
      markLeftX = Math.min(this.startingPoint, e.x);
      markRightX = Math.max(this.startingPoint, e.x);
      this.element.style.left = Math.min(markLeftX, markRightX);
      this.element.style.width = Math.abs(markRightX - markLeftX);
      return this.save(markLeftX, markRightX);
    };

    Mark.prototype.move = function(e) {
      var markLeftX, markRightX;
      markLeftX = this.domXMin - (this.movingStart - e.x);
      markRightX = this.domXMax - (this.movingStart - e.x);
      this.element.style.left = Math.min(markLeftX, markRightX);
      return this.element.style.width = Math.abs(markRightX - markLeftX);
    };

    Mark.prototype.save = function(markLeftX, markRightX) {
      this.domXMin = markLeftX;
      this.domXMax = markRightX;
      this.canvasXMin = markLeftX - this.canvasGraph.canvas.getBoundingClientRect().left;
      this.canvasXMax = markRightX - this.canvasGraph.canvas.getBoundingClientRect().left;
      this.dataXMin = this.canvasGraph.toDataXCoord(this.canvasXMin);
      return this.dataXMax = this.canvasGraph.toDataXCoord(this.canvasXMax);
    };

    return Mark;

  })();

  canvas = document.getElementById("graph");

  canvasState = new CanvasGraph(canvas, light_curve_data);

  canvasState.plotPoints();

}).call(this);
